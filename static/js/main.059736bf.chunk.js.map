{"version":3,"sources":["Question.js","Quiz.js","App.js","serviceWorker.js","index.js"],"names":["Question","data","this","props","prompt","onChange","e","updateChoice","id","target","value","choices","map","choice","index","key","type","checked","selectedChoice","name","React","Component","Quiz","console","log","deepCopy","JSON","parse","stringify","state","questions","find","question","i","setState","changeQuestions","event","currentQuestion","score","answer","className","disabled","onClick","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+MA0BeA,G,6KAvBH,IAAD,OACHC,EAAOC,KAAKC,MAAMF,KACtB,OACE,6BACGC,KAAKC,MAAMF,KAAKG,OACjB,yBAAKC,SAAU,SAACC,GAAD,OAAO,EAAKH,MAAMI,aAAaN,EAAKO,GAAIF,EAAEG,OAAOC,SAC7DT,EAAKU,QAAQC,KAAI,SAACC,EAAQC,GAAT,OAChB,0BAAMC,IAAKD,GACT,2BACEE,KAAK,QACLN,MAAOG,EACPI,QAAShB,EAAKiB,iBAAmBL,EACjCM,KAAMlB,EAAKO,KAEZK,Y,GAfQO,IAAMC,YCwFdC,E,kDArFb,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IAuBRI,aAAe,SAACC,EAAIK,GAClBU,QAAQC,IAAIhB,GACZ,IAAIiB,EAAWC,KAAKC,MAAMD,KAAKE,UAAU,EAAKC,MAAMC,YAEpDL,EAASM,MAAK,SAACC,EAAUC,GACvB,OAAID,EAASxB,KAAOA,IAClBiB,EAASQ,GAAGf,eAAiBL,GACtB,MAKX,EAAKqB,SAAS,CAAEJ,UAAWL,KApCV,EAuCnBU,gBAAkB,SAACC,GACjB,EAAKF,SAAS,CACZG,gBACE,EAAKR,MAAMQ,iBAAyC,SAAtBD,EAAM3B,OAAOU,KAAkB,GAAK,MAxCtE,EAAKU,MAAQ,CACXS,MAAO,EACPD,gBAAiB,EACjBP,UAAW,CACT,CACEtB,GAAI,EACJJ,OAAQ,eACRO,QAAS,CAAC,OAAQ,SAClB4B,OAAQ,OACRrB,eAAgB,MAElB,CACEV,GAAI,EACJJ,OAAQ,gBACRO,QAAS,CAAC,OAAQ,SAClB4B,OAAQ,QACRrB,eAAgB,QAlBL,E,qDA8CT,IAAD,OACHmB,EAAkBnC,KAAK2B,MAAMC,UAAU5B,KAAK2B,MAAMQ,iBACtD,OACE,6BACE,yBAAKG,UAAU,aACb,yBAAKA,UAAU,UAAf,UACA,yBAAKA,UAAU,QACb,4BACErB,KAAK,OACLsB,UAAWvC,KAAK2B,MAAMQ,gBACtBK,QAAS,SAACpC,GAAD,OAAO,EAAK6B,gBAAgB7B,KAHvC,SAQF,yBAAKkC,UAAU,UACb,kBAAC,EAAD,CAAUvC,KAAMoC,EAAiB9B,aAAcL,KAAKK,gBAEtD,yBAAKiC,UAAU,SACb,4BACErB,KAAK,OACLsB,WACIvC,KAAK2B,MAAMQ,gBAAkBnC,KAAK2B,MAAMC,UAAUa,OAAS,GAE/DD,QAAS,SAACpC,GAAD,OAAO,EAAK6B,gBAAgB7B,KALvC,SAUF,yBAAKkC,UAAU,UAAf,wBACwBtC,KAAK2B,MAAMQ,gBAAkB,EADrD,MAC2D,IACxDnC,KAAK2B,MAAMC,UAAUa,c,GA9EfvB,IAAMC,WCOVuB,MARf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,QCMcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.059736bf.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Question extends React.Component {\n  render() {\n    let data = this.props.data;\n    return (\n      <div>\n        {this.props.data.prompt}\n        <div onChange={(e) => this.props.updateChoice(data.id, e.target.value)}>\n          {data.choices.map((choice, index) => (\n            <span key={index}>\n              <input\n                type=\"radio\"\n                value={choice}\n                checked={data.selectedChoice === choice}\n                name={data.id}\n              />\n              {choice}\n            </span>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Question;\n","import React from \"react\";\nimport \"./Quiz.css\";\nimport Question from \"./Question\";\n\nclass Quiz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      currentQuestion: 0,\n      questions: [\n        {\n          id: 1,\n          prompt: \"this is true\",\n          choices: [\"true\", \"false\"],\n          answer: \"true\",\n          selectedChoice: null,\n        },\n        {\n          id: 2,\n          prompt: \"this is false\",\n          choices: [\"true\", \"false\"],\n          answer: \"false\",\n          selectedChoice: null,\n        },\n      ],\n    };\n  }\n\n  updateChoice = (id, choice) => {\n    console.log(id);\n    let deepCopy = JSON.parse(JSON.stringify(this.state.questions));\n\n    deepCopy.find((question, i) => {\n      if (question.id === id) {\n        deepCopy[i].selectedChoice = choice;\n        return true;\n      }\n      return false;\n    });\n\n    this.setState({ questions: deepCopy });\n  };\n\n  changeQuestions = (event) => {\n    this.setState({\n      currentQuestion:\n        this.state.currentQuestion + (event.target.name === \"next\" ? 1 : -1),\n    });\n  };\n\n  render() {\n    let currentQuestion = this.state.questions[this.state.currentQuestion];\n    return (\n      <div>\n        <div className=\"container\">\n          <div className=\"header\">header</div>\n          <div className=\"left\">\n            <button\n              name=\"back\"\n              disabled={!this.state.currentQuestion}\n              onClick={(e) => this.changeQuestions(e)}\n            >\n              back\n            </button>\n          </div>\n          <div className=\"middle\">\n            <Question data={currentQuestion} updateChoice={this.updateChoice} />\n          </div>\n          <div className=\"right\">\n            <button\n              name=\"next\"\n              disabled={\n                !(this.state.currentQuestion < this.state.questions.length - 1)\n              }\n              onClick={(e) => this.changeQuestions(e)}\n            >\n              next\n            </button>\n          </div>\n          <div className=\"footer\">\n            You are on question #{this.state.currentQuestion + 1} of{\" \"}\n            {this.state.questions.length}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Quiz;\n","import React from \"react\";\nimport Quiz from \"./Quiz\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}